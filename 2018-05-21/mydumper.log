ad_appname
ad_network
adspace_blacklist
adspace_mediav
advertiser
advertiser_check
advertiser_code
advertiser_convertion_log
advertiser_disposable_budget
advertiser_link_material
advertiser_ssp
assignments
auth_group
auth_group_permissions
authitem
authitemchild
auth_permission
auth_user
auth_user_groups
autotag_source
baiduPublisherSetting
balance_log
banner
Bind_bindversion
Bind_creative
Bind_exchangeposition
Bind_model
Bind_modeltype
Bind_rankingserver
Bind_solution
Bind_strategy
Bind_strategymodels
browser
campaign
campaign_label
campaign_link_label
channel
channel_group
code_type
condition_type
country
creative
creative_blackwords
creative_format_info
creative_link_material
creative_link_selfcreative
creative_material
creative_refusecause
creative_size
creative_ssp
creative_ssp_property
creative_template
creative_template_macrovariable
creative_template_properties
creative_type
creative_verifylog
csserver_sync_state
deal
deal_advertiser
deal_type
device_type
dim_domain
django_admin_log
django_content_type
django_migrations
django_session
dynamic_creative
dynamic_creative_sys_template
dynamic_creative_template
dynamic_creative_tpl_param
dynamic_creative_tpl_render_macro
dynamic_creative_tpl_temp
excess_budget
exchange_balance_report
exchange_business_cat
fcst_hod_marginal_model
fcst_tag_marginal_model
fcst_url_marginal_model
fcst_winrate_model
globalconfig
help_category
help_faq
language
location_district
location_link_district
location_new
log_data_api
log_error
log_operation_new
margin
material_group
material_property
material_property_metadata
material_ssp
media
mobile_apps_cat
mobile_brand
mobile_platform
network_cm
origincreative
origincreative_link
origincreative_temp
origincreative_template
os
os_exchange
platform
product_group_suning
qualification_ssp
report_update_status
role
role_group
role_group_label
role_operation
role_user
selfcreative
selfcreative_form_size
selfcreative_link_library
selfcreative_material_library
selfcreative_temp
selfcreative_template
selfcreative_tpl_favorites
selfcreative_tpl_group
selfcreative_tpl_group_cat
site_message
solution
solution_condition
solution_cpa_cat
solution_priority_price
solution_property
stats_advertiser_account
stats_advertiser_hour
stats_all
stats_all_hour
stats_all_location
stats_all_media
stats_all_rt
stats_campaign
stats_campaign_hour
stats_campaign_rt
stats_campaign_total
stats_cheating_before
stats_conversion_detail
stats_conversion_detail_rt
stats_creative
stats_creative_conv
stats_creative_frequence
stats_creative_hour
stats_creative_rt
stats_creative_total
stats_location
stats_location_hour
stats_media
stats_media_adspace
stats_media_bid_hour2
stats_media_hour
stats_order_daily
stats_rs_creative
stats_rs_overview
stats_solution
stats_solution_hour
stats_solution_rt
stats_solution_rt_mon
stats_solution_total
stats_total_history_advertiser
stats_total_history_creative
stats_total_history_solution
stats_total_history_solution_creative
StatsTrackcodeStatus
system_pushstate
system_tips
tag_class
tag_class_ext
tag_count
tag_instance
tags_aud
tags_hist
tags_pred
tag_wechat
taxonomy_ad_form
taxonomy_ad_slot
taxonomy_ad_space
taxonomy_audience
taxonomy_audience_properties
taxonomy_business_cat
taxonomy_carrier
taxonomy_connection_type
taxonomy_device
taxonomy_generic_media
taxonomy_media
taxonomy_position
taxonomy_retargeting
tbl_migration
url_blacklist
url_blacklist_item
user
user_config
user_resource
user_suning
video_media_syncstatus
YiiSession
yttx_user
yttx_user_related


-- 2、查询“生物”课程比“物理”课程成绩高的所有学生的学号；
-- 			获取所有有生物课程的人（学号，成绩） - 临时表
--     	获取所有有物理课程的人（学号，成绩） - 临时表
--     	根据【学号】连接两个临时表：
--         学号  物理成绩   生物成绩
--
--     	然后再进行筛选
SELECT
	*
FROM
	(
		SELECT
			sw.student_id AS sid,
			sw.num AS sw_num,
			wl.num AS wl_num
		FROM
			(
				SELECT
					student_id,
					num
				FROM
					score
				WHERE
					course_id = 1
			) AS sw
		INNER JOIN (
			SELECT
				student_id,
				num
			FROM
				score
			WHERE
				course_id = 2
		) AS wl ON sw.student_id = wl.student_id
	) AS r1
WHERE
	r1.sw_num > r1.wl_num;




-- 3、查询平均成绩大于60分的同学的学号和平均成绩；
-- 方法一：
SELECT student_id,SUM(num)/COUNT(course_id) FROM score GROUP BY student_id HAVING SUM(num)/COUNT(course_id) > 60;
-- 方法二：
SELECT student_id,AVG(num) FROM score GROUP BY student_id HAVING AVG(num) > 60;



-- 4、查询所有同学的学号、姓名、选课数、总成绩；
SELECT
	t1.student_id,
	student.sname,
	t1.xks,
	t1.zcj
FROM
	(
		SELECT
			student_id,
			COUNT(1) AS xks,
			SUM(num) AS zcj
		FROM
			score
		GROUP BY
			student_id
	) AS t1
LEFT JOIN student ON t1.student_id = student.sid;



-- 5、查询姓“李”的老师的个数；
SELECT COUNT(1) FROM teacher WHERE tname LIKE '李%';


-- 6、查询没学过“李平”老师课的同学的学号、姓名；
-- 先查李平老师教的课的课程id，再在score表中限定course_id在查出的cid的学生的学号，再查学生表的姓名
SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT DISTINCT
			student_id
		FROM
			score
		WHERE
			student_id NOT IN (
				SELECT DISTINCT
					student_id
				FROM
					score
				WHERE
					course_id IN (
						SELECT
							course.cid
						FROM
							course
						LEFT JOIN teacher ON course.teacher_id = teacher.tid
						WHERE
							teacher.tname = '李平老师'
					)
			)
	)



-- 7、查询学过“001”并且也学过编号“002”课程的同学的学号、姓名；
SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT
			t1.student_id
		FROM
			(
				SELECT
					student_id
				FROM
					score
				WHERE
					course_id = 1
				ORDER BY
					student_id
			) AS t1
		INNER JOIN (
			SELECT
				student_id
			FROM
				score
			WHERE
				course_id = 2
			ORDER BY
				student_id
		) AS t2 ON t1.student_id = t2.student_id
	)



-- 8、查询学过“李平”老师所教的所有课的同学的学号、姓名；
-- 与第六条类似
SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT
			student_id
		FROM
			score
		WHERE
			course_id IN (
				SELECT
					course.cid
				FROM
					course
				LEFT JOIN teacher ON course.teacher_id = teacher.tid
				WHERE
					teacher.tname = '李平老师'
			)
		GROUP BY
			student_id
		HAVING
			COUNT(1) = 2
	)



-- 9、查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名；
SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT
			t1.student_id
		FROM
			(
				SELECT
					student_id,
					num
				FROM
					score
				WHERE
					course_id = 1
			) AS t1
		INNER JOIN (
			SELECT
				student_id,
				num
			FROM
				score
			WHERE
				course_id = 2
		) AS t2 ON t1.student_id = t2.student_id
		WHERE
			t1.num > t2.num
	)



-- 10、查询有课程成绩小于60分的同学的学号、姓名；
SELECT
	t1.student_id,
	t2.sname
FROM
	(
		SELECT
			student_id
		FROM
			score
		GROUP BY
			student_id
		HAVING
			min(num) < 60
	) AS t1
LEFT JOIN student AS t2 ON t1.student_id = t2.sid


-- 11、查询没有学全所有课的同学的学号、姓名；
SELECT
	t1.student_id,
	t2.sname
FROM
	(
		SELECT
			student_id
		FROM
			score
		GROUP BY
			student_id
		HAVING
			COUNT(1) < 4
	) AS t1
LEFT JOIN student AS t2 ON t1.student_id = t2.sid


-- 12、查询至少有一门课与学号为“001”的同学所学相同的同学的学号和姓名；
SELECT
	sid,
	sname
FROM
	student
WHERE
	sid IN (
		SELECT DISTINCT
			student_id
		FROM
			score
		WHERE
			course_id IN (
				SELECT
					course_id
				FROM
					score
				WHERE
					student_id = 1
			)
	)



-- 13、查询至少学过学号为“001”同学所选课程中任意一门课的其他同学学号和姓名；
SELECT
	student_id,
	sname,
	count(course_id)
FROM
	score
LEFT JOIN student ON score.student_id = student.sid
WHERE
	student_id != 1
AND course_id IN (
	SELECT
		course_id
	FROM
		score
	WHERE
		student_id = 1
)
GROUP BY
	student_id
HAVING
	count(course_id)=(
		SELECT
			count(course_id)
		FROM
			score
		WHERE
			student_id = 1
	)


-- 14、查询和“002”号的同学学习的课程完全相同的其他同学学号和姓名；
SELECT
	student_id,
	sname
FROM
	score
LEFT JOIN student ON score.student_id = student.sid
WHERE
	student_id IN (
		SELECT
			student_id
		FROM
			score
		WHERE
			student_id != 2
		GROUP BY
			student_id
		HAVING
			count(course_id) = (
				SELECT
					count(1)
				FROM
					score
				WHERE
					student_id = 2
			)
	)
AND course_id IN (
	SELECT
		course_id
	FROM
		score
	WHERE
		student_id = 2
)
GROUP BY
	student_id
HAVING
	count(course_id) = (
		SELECT
			count(1)
		FROM
			score
		WHERE
			student_id = 2
	)



-- 15、删除学习“李平”老师课的SC表记录；
DELETE
FROM
	score
WHERE
	course_id IN (
		SELECT
			course.cid
		FROM
			course
		LEFT JOIN teacher ON course.teacher_id = teacher.tid
		WHERE
			teacher.tname = '李平老师'
	);


-- 16、向SC表中插入一些记录，这些记录要求符合以下条件：①没有上过编号“002”课程的同学学号；②插入“002”号课程的平均成绩；


--
-- 17、按平均成绩从低到高显示所有学生的“语文”、“数学”、“英语”三门的课程成绩，按如下形式显示： 学生ID,语文,数学,英语,有效课程数,有效平均分；
SELECT
	sc.student_id,
	(
		SELECT
			num
		FROM
			score
		LEFT JOIN course ON score.course_id = course.cid
		WHERE
			course.cname = '生物'
		AND score.student_id = sc.student_id
	) AS sw,
	(
		SELECT
			num
		FROM
			score
		LEFT JOIN course ON score.course_id = course.cid
		WHERE
			course.cname = '物理'
		AND score.student_id = sc.student_id
	) AS wl,
	(
		SELECT
			num
		FROM
			score
		LEFT JOIN course ON score.course_id = course.cid
		WHERE
			course.cname = '美术'
		AND score.student_id = sc.student_id
	) AS ms,
	COUNT(sc.num),
	AVG(num)
FROM
	score AS sc
GROUP BY
	student_id
ORDER BY
	AVG(num)


-- 18、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分；
select course_id,max(num),min(num) from score GROUP BY course_id


-- 19、按各科平均成绩从低到高和及格率的百分数从高到低顺序；
SELECT course_id,avg(num) from score GROUP BY course_id;